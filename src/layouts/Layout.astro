---
import { PUBLIC_GA_TRACKING_ID, ENABLE_LIGHTBOX } from '../server-constants.ts'
import { getDatabase } from '../lib/notion/client.ts'
import { getNavLink, getStaticFilePath, filePath } from '../lib/blog-helpers.ts'
import '../styles/syntax-coloring.css'
import GoogleAnalytics from '../components/GoogleAnalytics.astro'
import SearchModal from '../components/SearchModal.astro'
import SearchButton from '../components/SearchButton.astro'
import '../styles/reset.css'
import Footer from './Footer.astro'
import Header from './Header.astro'
import Nav from './Nav.astro'
import BlogPostsLink from '../components/BlogPostsLink.astro'
import Mainvisual from './Mainvisual.astro'

export interface Props {
  title: string
  description: string
  path: string
  ogImage: string
}

const { title = '', description = '', path = '/', ogImage = '' } = Astro.props

const database = await getDatabase()

const siteTitle = title ? `${title} | ${database.Title}` : database.Title
const siteDescription = description ? description : database.Description
const siteURL = new URL(getNavLink(path), Astro.site).toString()
const siteOGImage = new URL(
  getStaticFilePath('/default-og-image.png'),
  Astro.site
)

let coverImageURL: string
if (database.Cover) {
  if (database.Cover.Type === 'external') {
    coverImageURL = database.Cover.Url
  } else if (database.Cover.Type === 'file') {
    try {
      coverImageURL = filePath(new URL(database.Cover.Url))
    } catch (err) {
      console.log('Invalid DB cover image URL')
    }
  }
}

let customIconURL: string
if (database.Icon && database.Icon.Type === 'file') {
  try {
    customIconURL = filePath(new URL(database.Icon.Url))
  } catch (err) {
    console.log('Invalid DB custom icon URL')
  }
}



---

<!doctype html>
<html lang="en" prefix="og: https://ogp.me/ns#">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="max-image-preview:large" />
    <meta charset="UTF-8" />
    <meta name="generator" content={Astro.generator} />
    <title>{siteTitle}</title>
    <meta name="description" content={siteDescription} />
    <link rel="canonical" href={siteURL} />
    <meta property="og:url" content={siteURL} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={siteDescription} />
    <meta property="og:site_name" content={database.Title} />
    <meta property="og:image" content={ogImage || siteOGImage} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={siteDescription} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={ogImage || siteOGImage} />
    <link rel="icon" href="/src/images/favicon.ico" sizes="any"><!-- 32×32 -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.min.css"
      integrity="sha384-vKruj+a13U8yHIkAyGgK1J3ArTLzrFGBbBc0tDp4ad/EyewESeXE/Iv67Aj8gKZ0"
      crossorigin="anonymous"
    />
    <script src="https://cdn.jsdelivr.net/gh/studio-freight/lenis@1.0.19/bundled/lenis.min.js"></script> 
  </head>
  <body>
    <GoogleAnalytics trackingId={PUBLIC_GA_TRACKING_ID} />
    <Header />
    <main class="main">
      <slot />
    </main>
    <Footer />

    <SearchModal />
    {
      ENABLE_LIGHTBOX && (
        <script src={getStaticFilePath('/scripts/fslightbox.js')} />
      )
    }
  </body>
</html>

<style>
</style>

<style is:global>
  :root {
    --gap-quarter: 0.25rem;
    --gap-half: 0.5rem;
    --gap: 1rem;
    --gap-double: 2rem;

    --bg: #fff;
    --fg: #333;
    --text: #333;
    --textRev: #fff;
    --accents-1: #ec503b;
    --accents-2: #666;
    --accents-3: #666;
    --geist-foreground: #000;
    --geist-success: #690;

    
    --paddingInner: 40px;

    --headerHeight: 40px;
    --mvHeight: 400px;
    --footerHeight: 80px;

    --radius: 4px;

    --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
      'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',
      'Helvetica Neue', sans-serif;
    --font-mono: SFMono-Regular, Menlo, Consolas, 'PT Mono', 'Liberation Mono',
      Courier, monospace;
  }
  @media (min-width: 560px) {
    :root {
      --paddingInner: 60px;
    }
  }
  @media (min-width: 960px) {
    :root {
      --paddingInner: 40px;
      --mvHeight: 400px;
    }
  }
  @media (min-width: 1280px) {
    :root {
      --paddingInner: 80px;
      --mvHeight: 400px;
    }
  }

  * {
    box-sizing: border-box;
    word-break: break-word;
  }

  html,
  body {
    padding: 0;
    margin: 0;
    font-size: 16px;
  }

  body {
    background: var(--bg);
    color: var(--fg);
    font-family:
      Helvetica,
      'Hiragino Sans',
      'Hiragino Kaku Gothic ProN',
      'Hiragino Sans GB',
      メイリオ,
      Meiryo,
      'Apple Color Emoji',
      Arial,
      sans-serif,
      'Segoe UI Emoji',
      'Segoe UI Symbol';

    /*background-image: radial-gradient(#ddd 1px, transparent 1px),
      radial-gradient(#ddd 1px, transparent 1px);*/
    background-position:
      0 0,
      25px 25px;
    background-attachment: fixed;
    background-size: 50px 50px;
    /* Hack */

    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
    letter-spacing: .02em;
  }

  p {
  }

</style>
