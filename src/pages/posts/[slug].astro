---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostTags from '../../components/PostTags.astro'
import PostBody from '../../components/PostBody.astro'
import styles from '../../styles/blog.module.css'
import Inner from '../../layouts/Inner.astro'
import PostExcerpt from '../../components/PostExcerpt.astro'
import { getTagLink } from '../../lib/blog-helpers.ts'
import { Image } from 'astro:assets';
import localMvImage from '/src/images/mv2.jpg';

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [
  blocks,
  allPosts,
  rankedPosts,
  recentPosts,
  posts,
  tags,
  postsHavingSameTag,
] = await Promise.all([
  getAllBlocksByBlockId(post.PageId),
  getAllPosts(),
  getRankedPosts(),
  getPosts(5),
  getAllTags(),
  getPostsByTag(post.Tags[0]?.name, 6),
])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

const { enableLink = true } = Astro.props

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}

export interface Props {
  title: string
  date: string
}

const { title = '', date = '' } = Astro.props
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div class="mv">
    <div class="mv-copy">
      <p class="mv-date">{post.Date}</p>
      <h1 class="mv-ttl">{post.Title}</h1>
      <ul class="card-tags">
        {
          post.Tags &&
            post.Tags.length > 0 &&
            post.Tags.map((tag: SelectProperty) => {
              if (enableLink) {
                return (
                  <li class="card-tag">
                    <a
                      href={getTagLink(tag.name)}
                      class={`card-tag-link ${tag.color}`}
                    >
                      #{tag.name}
                    </a>
                  </li>
                )
              }
              return <span class={`tag ${tag.color}`}>{tag.name}</span>
            })
        }
      </ul>
    </div>
    <div class="mv-image">
      <Image src={localMvImage} alt=""/>
    </div>
  </div>
  <Inner>
    <div class={styles.post}>
      <!-- <PostTags post={post} /> -->
      <!-- <PostFeaturedImage post={post} /> -->
      <PostExcerpt post={post} />
      <PostBody blocks={blocks} />
      <PostTags post={post} />
    </div>
  </Inner>
</Layout>

<style>
  .mv {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: -2;
  }
  .mv-copy {
    color: #fff;
    display: grid;
    gap: 16px;
    padding-inline: var(--paddingInner);
    position: absolute;
    bottom: 80px;
    width: 100%;
  }
  .mv-date {
    font-size: 16px;
    font-weight: 500;
    line-height: 1;
  }
  .mv-ttl {
    font-size: 40px;
    font-weight: 500;
    line-height: 1.4;
  }
  .mv-image {
    height: var(--mvHeight);
  }
  img {
    aspect-ratio: 16/9;
    height: 100%;
    object-fit: cover;
    width: 100%;
  }
  .card-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 5px 10px;
    list-style-type: none;
    margin-top: 10px;
    padding-left: 0;
  }
  .card-tag {
    font-size: 14px;
    gap: 6px;
    line-height: 1.2rem;
    position: relative;
  }
  .card-tag-link {
    background: #fff;
    border-radius: 3px;
    color: rgb(50, 48, 44);
    line-height: 1.2;
    min-width: 0;
    padding: 3px 8px;
    position: relative;
    z-index: 2;
  }
</style>
